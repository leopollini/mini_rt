>>>>major1<<<< --++ leo

-- introdotte struct 't_gameobject' e 't_transform' (chiedi a Leo per spiegazioni)

-- gia' modificato tutto di conseguenza; il programma funziona e continua a mostrare palle

-- prototipo inizializzatore gameobject:
new_gameobject(new_transform((t_vec3_d){ORIGINE}, (t_vec3_d){VERSORE ROTAZIONE}, (t_vec3_d){VETTORE SCALA}), (t_color_3){COLORE RGB}, TIPO)));

-- In questo formato di salvataggio gli oggetti esistono come prototipi di dimensioni unitarie; la scala (coerente col tipo di oggetto: vettore scala di una sfera -> {2*r, 2*r, 2*r}) e` a coordinate locali, quindi un cilindro di scala {1, 2, 1} (raggio = 1, h = 2) mantiene le stesse proporzioni e vettore scala invariato se ruotato.

-- int alternativa a (t_vec3_d){x, y, z} esiste gia' new_v3_d(x, y, z), pero' il primo metodo e' piu' leggero :P

************************************************/

>>>>>modifiche<<<<<<< Nelly

Ciao!!! ho inserito il makefile e fatto un po' di ordine nelle cartelle... il make dovrebbe gia' compilare... se trovi problemi, scusa XD

Ho implementato il parsing, li dove non sapevo inserire la roba ho aggiunto delle variabili
qui un riassunto:

La R risoluzione l'ho inserita nelle x e y della size di t_windows, ho lasciato di base la possibilita' di cambiarle inserendole come 3/4 argomento oppure di default a 500/500.

La A, luce di ambiente l'ho inserita in ambient ho creato un double value per il valore e inserito t_color per il colore, spero andassero li.

La C ho inserito il view point nella pos xyz,  l'orentation in lookat xyz e il FOV. Dimmi se poi hai bisogno di altro qui, io ho trattato tutto come float, ho visto che ci sono varie altre liste o strutture dentro cam, comunque non ho toccato la tua impostazione iniziale, le sovrascrivo. 


